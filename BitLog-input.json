{"language":"Solidity","sources":{"project:/contracts/BitLog.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0 <0.9.0;\n\ncontract BitLog {\n\n    mapping(bytes32 => uint256) private _commitId;\n    mapping(uint256 => address) private _commitAuthor;\n    mapping(uint256 => uint256) private _commitTime;\n    mapping(address => uint256) private _commits;\n\n    event AddCommitEvent(address sender_, address addr_);\n\n    function addCommit(uint256 commitId_, address author_) public returns (bytes32) {\n        bytes32 _hash = keccak256(abi.encodePacked(author_, _commits[author_]++));\n        _commitId[_hash] = commitId_;\n        _commitAuthor[commitId_] = author_;\n        _commitTime[commitId_] = block.timestamp;\n        emit AddCommitEvent(msg.sender, author_);\n        return _hash;\n    }\n\n    function getCommitId(bytes32 commitId_) public view returns (uint256) {\n        return _commitId[commitId_];\n    }\n\n    function getCommitAuthor(uint256 commit_) public view returns (address) {\n        return _commitAuthor[commit_];\n    }\n\n    function getCommitTime(uint256 commit_) public view returns (uint256) {\n        return _commitTime[commit_];\n    }\n\n    function getNumCommits(address addr_) public view returns (uint256) {\n        return _commits[addr_];\n    }\n\n    function getAllCommits(address addr_, uint256 index_) public pure returns (bytes32[] memory) {\n        bytes32[] memory commits = new bytes32[](index_);\n        for (uint256 i = 0; i < index_; i++) {\n            commits[i] = keccak256(abi.encodePacked(addr_, i));\n        }\n        return commits;\n    }\n\n}"}},"settings":{"remappings":[],"optimizer":{"enabled":false,"runs":200},"evmVersion":"london"}}